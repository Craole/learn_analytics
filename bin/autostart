#!/usr/bin/env rust-script
//! ```cargo
//! [dependencies]
//! ```

use std::env;
use std::path::PathBuf;

fn main() {
    /// Greet the current user
    hello();

    /// Update the PATH Variabl;
    let bin = get_bin_directory();
    update_path(&bin);
}

fn hello() {
    let username = get_username();
    let capitalized_username = capitalize_first_letter(&username);
    println!("Welcome {}. Let's do this!", capitalized_username);
}

fn capitalize_first_letter(username: &str) -> String {
    let mut chars = username.chars();
    match chars.next() {
        None => String::new(),
        Some(first_char) => {
            let capitalized = first_char.to_uppercase().collect::<String>();
            capitalized + chars.as_str()
        }
    }
}

fn get_username() -> String {
    let username = std::env::var("USER").unwrap_or_else(|_| String::from("Unknown User"));
    username
}

fn get_bin_directory() -> String {
    let current_dir = std::env::current_dir().expect("Failed to get current directory");
    let script_path = current_dir
        .join("bin")
        .join("autostart")
        .canonicalize()
        .expect("Failed to get canonical path of script directory");

    let bin_dir = script_path
        .parent()
        .expect("Failed to get bin directory")
        .to_str()
        .expect("Failed to convert bin directory to string");

    bin_dir.to_string()
}

fn get_current_directory() -> String {
    let current_dir = env::current_dir().expect("Failed to get current directory");

    let current_dir_str = current_dir
        .to_str()
        .expect("Failed to convert current directory to string");

    current_dir_str.to_string()
}

fn update_path(new_path_dir: &str) {
    let mut path = match env::var_os("PATH") {
        Some(val) => env::split_paths(&val).collect::<Vec<_>>(),
        None => Vec::new(),
    };

    path.push(new_path_dir.into());

    let new_path = env::join_paths(path).expect("Failed to join PATH directories");

    env::set_var("PATH", new_path);

    let updated_path = env::var("PATH").expect("Failed to get updated PATH variable");
    println!("Updated PATH: {:?}", updated_path);
}
